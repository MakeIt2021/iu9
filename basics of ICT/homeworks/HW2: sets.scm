; O(n^2)
(define (list->set xs)
  (define (helper been res xs)
    (if (not (null? xs))
        (if (not (member (car xs) been))
            (helper (cons (car xs) been) (cons (car xs) res) (cdr xs))
            (helper been res (cdr xs)))
        res
        )
    )
  (helper '() '() xs)
  )

; O(n^2)
(define (set? xs)
  (define (helper els xs)
    (or (null? xs)
        (and (not (member (car xs) els))
             (helper (cons (car xs) els) (cdr xs)))))
  (helper '() xs))

; O(n^2)
(define (union xs ys)
  (if (not (null? ys))
      (if (not (member (car ys) xs))
          (union (cons (car ys) xs) (cdr ys))
          (union xs (cdr ys)))
      xs
      )
  )

; O(m*n)
(define (intersection xs ys)
  (define (helper res xs ys)
    (if (not (or (null? xs) (null? ys)))
        (if (member (car xs) ys)
            (helper (cons (car xs) res) (cdr xs) ys)
            (helper res (cdr xs) ys))
        res)
    )
  (helper '() xs ys))

; O(m*n)
(define (difference xs ys)
  (define (helper res xs ys)
    (if (not (or (null? xs) (null? ys)))
        (if (not (member (car xs) ys))
            (helper (cons (car xs) res) (cdr xs) ys)
            (helper res (cdr xs) ys))
        res)
    )
  (helper '() xs ys))

; O(m*n)
(define (symmetric-difference xs ys) 
  (union (difference xs ys) (difference ys xs))
  )

; O(m*n)
(define (set-eq? xs ys)
  (null? (symmetric-difference xs ys)))
